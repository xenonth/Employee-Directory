{"version":3,"sources":["components/EmployeeTable.js","components/EmployeeData.js","components/FilterInput.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeTable","props","employeeData","config","React","useState","sortConfig","setSortConfig","useMemo","sortableEmployeeData","sort","a","b","key","direction","requestSort","useSortableData","employees","getClassNamesFor","name","undefined","Table","striped","bordered","hover","variant","type","onClick","className","map","employee","age","hobby","id","FilterForm","state","value","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","Number","filteredData","find","console","log","alert","onSubmit","onChange","Component","App","Container","fluid","Row","Col","xs","lg","FilterInput","EmployeeData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec29143d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Table from \"react-bootstrap/Table\"\r\n\r\n/*The following code was copied from https://www.smashingmagazine.com/2020/03/sortable-tables-react/\r\nThe guide was read through lost my way with the code and compared the following.\r\n*/\r\n// function to look through and sort data \r\nconst useSortableData = (employeeData, config = null) => {\r\n  const [sortConfig, setSortConfig] = React.useState(config);\r\n\r\n  const sortedEmployeeData = React.useMemo(() => {\r\n    let sortableEmployeeData = [...employeeData];\r\n    //Depending on default, Ascending or Descending data     \r\n    if (sortConfig !== null) {\r\n      \r\n      //Ascending Conditional\r\n      sortableEmployeeData.sort((a, b) => {\r\n        if (a[sortConfig.key] < b[sortConfig.key]) {\r\n          return sortConfig.direction === 'ascending' ? -1 : 1;\r\n        }\r\n\r\n        //Descending Conditional\r\n        if (a[sortConfig.key] > b[sortConfig.key]) {\r\n          return sortConfig.direction === 'ascending' ? 1 : -1;\r\n        }\r\n        //Default\r\n        return 0;\r\n      });\r\n    }\r\n    return sortableEmployeeData;\r\n  }, [employeeData, sortConfig]);\r\n\r\n  const requestSort = (key) => {\r\n    let direction = 'ascending';\r\n    if (\r\n      sortConfig &&\r\n      sortConfig.key === key &&\r\n      sortConfig.direction === 'ascending'\r\n    ) {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  return { employeeData: sortedEmployeeData, requestSort, sortConfig };\r\n};\r\n\r\nconst EmployeeTable = (props) => {\r\n  const { employeeData, requestSort, sortConfig } = useSortableData(props.employees);\r\n  const getClassNamesFor = (name) => {\r\n    if (!sortConfig) {\r\n      return;\r\n    }\r\n    return sortConfig.key === name ? sortConfig.direction : undefined;\r\n  };\r\n  return (\r\n    <Table striped bordered hover variant=\"dark\">\r\n      <caption>Employee Directory</caption>\r\n      <thead>\r\n        <tr>\r\n          <th>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => requestSort('name')}\r\n              className={getClassNamesFor('name')}\r\n            >\r\n              Name\r\n            </button>\r\n          </th>\r\n          <th>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => requestSort('age')}\r\n              className={getClassNamesFor('age')}\r\n            >\r\n              age\r\n            </button>\r\n          </th>\r\n          <th>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => requestSort('hobby')}\r\n              className={getClassNamesFor('hobby')}\r\n            >\r\n              Hobby\r\n            </button>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {employeeData.map((employee) => (\r\n          <tr key={employee.id}>\r\n            <td>{employee.name}</td>\r\n            <td>{employee.age}</td>\r\n            <td>{employee.hobby}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default EmployeeTable;","const employeeData = [\r\n    { id: 1, name: 'Patricia Millstein', age: 49, hobby: \"Shadow Magic\" },\r\n    { id: 2, name: 'Gaius Worzel', age: 19, hobby: \"Horseback Riding\" },\r\n    { id: 3, name: 'Charlie McBurn', age: 24, hobby: \"Pyromanic\" },\r\n    { id: 4, name: 'Dean Tsunatra', age: 42, hobby: \"Singing\" },\r\n    { id: 5, name: 'Bruce Constinata', age: 63, hobby: \"Volunteering\" },\r\n    { id: 6, name: 'Dina Beatrice', age: 45, hobby: \"Painting\" },\r\n    { id: 7, name: 'Hugo Belllingie', age: 99, hobby: \"Investing\" },\r\n];\r\n\r\nexport default employeeData","import React from 'react';\r\n\r\n\r\n// import employee Data to be filtered\r\nimport employeeData from './EmployeeData'\r\n\r\nclass FilterForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {value: ''};\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    handleChange(event) {\r\n      this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n      event.preventDefault();\r\n        if (this.state.value === '') {\r\n            return employeeData;\r\n\r\n        } else if(Number(this.state.value) === 1) {\r\n           //DataFiltering\r\n           let filteredData = employeeData.find(employee => employee.id === 1)\r\n           console.log(filteredData)\r\n           alert(`${filteredData.name} is an employee at this firm and their favourite Hobby is ${filteredData.hobby}`)        \r\n        \r\n        }   else if(Number(this.state.value) === 2) {\r\n            //DataFiltering\r\n            let filteredData = employeeData.find(employee => employee.id === 2)\r\n            console.log(filteredData)\r\n            alert(`${filteredData.name} is an employee at this firm and their favourite Hobby is ${filteredData.hobby}`)\r\n\r\n         } else if(Number(this.state.value) === 3) {\r\n            //DataFiltering\r\n            let filteredData = employeeData.find(employee => employee.id === 3)\r\n            console.log(filteredData)\r\n            alert(`${filteredData.name} is an employee at this firm and their favourite Hobby is ${filteredData.hobby}`)        \r\n         } else if(Number(this.state.value) === 4) {\r\n            //DataFiltering\r\n            let filteredData = employeeData.find(employee => employee.id === 4)\r\n            console.log(filteredData)\r\n            alert(`${filteredData.name} is an employee at this firm and their favourite Hobby is ${filteredData.hobby}`)        \r\n         } else if(Number(this.state.value) === 5) {\r\n            //DataFiltering\r\n            let filteredData = employeeData.find(employee => employee.id === 5)\r\n            console.log(filteredData)\r\n            alert(`${filteredData.name} is an employee at this firm and their favourite Hobby is ${filteredData.hobby}`) \r\n        } else if(Number(this.state.value) === 6) {\r\n            //DataFiltering\r\n            let filteredData = employeeData.find(employee => employee.id === 6)\r\n            console.log(filteredData)\r\n            alert(`${filteredData.name} is an employee at this firm and their favourite Hobby is ${filteredData.hobby}`) \r\n        }   else if(Number(this.state.value) === 7) {\r\n            //DataFiltering\r\n            let filteredData = employeeData.find(employee => employee.id === 7)\r\n            console.log(filteredData)\r\n            alert(`${filteredData.name} is an employee at this firm and their favourite Hobby is ${filteredData.hobby}`) \r\n        }\r\n    }   \r\n  \r\n    render() {\r\n      return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Filter By Employee Id (1 to 7):\r\n            <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default FilterForm","//Bootstrap components\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n//My own components\nimport EmployeeTable from \"./components/EmployeeTable\"\n\nimport FilterInput from \"./components/FilterInput\"\n\nimport EmployeeData from \"./components/EmployeeData\"\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Container fluid>\n        <Row className=\"justify-content-md-center\">\n          <h2>Employee Directory</h2>\n        </Row>\n        \n        <Row>\n          <Col xs lg=\"2\"></Col>\n          <Col xs lg=\"2\">\n            <FilterInput />\n          </Col>\n          <Col></Col>\n        </Row>\n\n        <Row className=\"justify-content-md-center\">\n          <Col xs lg=\"3\"></Col>\n          <Col xs lg =\"6\">\n            <EmployeeTable\n              employees={EmployeeData}/>\n          </Col>\n          <Col xs lg=\"3\"></Col>\n        </Row>\n\n    </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}